// Code generated by mockery v2.43.2. DO NOT EDIT.

package transform

import (
	model "github.com/opplieam/bb-transform/.jetgen/postgres/public/model"
	mock "github.com/stretchr/testify/mock"
)

// MockCategoryStorer is an autogenerated mock type for the CategoryStorer type
type MockCategoryStorer struct {
	mock.Mock
}

type MockCategoryStorer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCategoryStorer) EXPECT() *MockCategoryStorer_Expecter {
	return &MockCategoryStorer_Expecter{mock: &_m.Mock}
}

// CleanUp provides a mock function with given fields: version
func (_m *MockCategoryStorer) CleanUp(version string) error {
	ret := _m.Called(version)

	if len(ret) == 0 {
		panic("no return value specified for CleanUp")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(version)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCategoryStorer_CleanUp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CleanUp'
type MockCategoryStorer_CleanUp_Call struct {
	*mock.Call
}

// CleanUp is a helper method to define mock.On call
//   - version string
func (_e *MockCategoryStorer_Expecter) CleanUp(version interface{}) *MockCategoryStorer_CleanUp_Call {
	return &MockCategoryStorer_CleanUp_Call{Call: _e.mock.On("CleanUp", version)}
}

func (_c *MockCategoryStorer_CleanUp_Call) Run(run func(version string)) *MockCategoryStorer_CleanUp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockCategoryStorer_CleanUp_Call) Return(_a0 error) *MockCategoryStorer_CleanUp_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCategoryStorer_CleanUp_Call) RunAndReturn(run func(string) error) *MockCategoryStorer_CleanUp_Call {
	_c.Call.Return(run)
	return _c
}

// InsertDataset provides a mock function with given fields: dataset
func (_m *MockCategoryStorer) InsertDataset(dataset []model.CategoryDataset) error {
	ret := _m.Called(dataset)

	if len(ret) == 0 {
		panic("no return value specified for InsertDataset")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]model.CategoryDataset) error); ok {
		r0 = rf(dataset)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCategoryStorer_InsertDataset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertDataset'
type MockCategoryStorer_InsertDataset_Call struct {
	*mock.Call
}

// InsertDataset is a helper method to define mock.On call
//   - dataset []model.CategoryDataset
func (_e *MockCategoryStorer_Expecter) InsertDataset(dataset interface{}) *MockCategoryStorer_InsertDataset_Call {
	return &MockCategoryStorer_InsertDataset_Call{Call: _e.mock.On("InsertDataset", dataset)}
}

func (_c *MockCategoryStorer_InsertDataset_Call) Run(run func(dataset []model.CategoryDataset)) *MockCategoryStorer_InsertDataset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]model.CategoryDataset))
	})
	return _c
}

func (_c *MockCategoryStorer_InsertDataset_Call) Return(_a0 error) *MockCategoryStorer_InsertDataset_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCategoryStorer_InsertDataset_Call) RunAndReturn(run func([]model.CategoryDataset) error) *MockCategoryStorer_InsertDataset_Call {
	_c.Call.Return(run)
	return _c
}

// MatchedCategory provides a mock function with given fields:
func (_m *MockCategoryStorer) MatchedCategory() ([]model.MatchCategory, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MatchedCategory")
	}

	var r0 []model.MatchCategory
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]model.MatchCategory, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.MatchCategory); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.MatchCategory)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCategoryStorer_MatchedCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MatchedCategory'
type MockCategoryStorer_MatchedCategory_Call struct {
	*mock.Call
}

// MatchedCategory is a helper method to define mock.On call
func (_e *MockCategoryStorer_Expecter) MatchedCategory() *MockCategoryStorer_MatchedCategory_Call {
	return &MockCategoryStorer_MatchedCategory_Call{Call: _e.mock.On("MatchedCategory")}
}

func (_c *MockCategoryStorer_MatchedCategory_Call) Run(run func()) *MockCategoryStorer_MatchedCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCategoryStorer_MatchedCategory_Call) Return(_a0 []model.MatchCategory, _a1 error) *MockCategoryStorer_MatchedCategory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCategoryStorer_MatchedCategory_Call) RunAndReturn(run func() ([]model.MatchCategory, error)) *MockCategoryStorer_MatchedCategory_Call {
	_c.Call.Return(run)
	return _c
}

// OriginalCategory provides a mock function with given fields:
func (_m *MockCategoryStorer) OriginalCategory() (Category, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for OriginalCategory")
	}

	var r0 Category
	var r1 error
	if rf, ok := ret.Get(0).(func() (Category, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() Category); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Category)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCategoryStorer_OriginalCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OriginalCategory'
type MockCategoryStorer_OriginalCategory_Call struct {
	*mock.Call
}

// OriginalCategory is a helper method to define mock.On call
func (_e *MockCategoryStorer_Expecter) OriginalCategory() *MockCategoryStorer_OriginalCategory_Call {
	return &MockCategoryStorer_OriginalCategory_Call{Call: _e.mock.On("OriginalCategory")}
}

func (_c *MockCategoryStorer_OriginalCategory_Call) Run(run func()) *MockCategoryStorer_OriginalCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCategoryStorer_OriginalCategory_Call) Return(_a0 Category, _a1 error) *MockCategoryStorer_OriginalCategory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCategoryStorer_OriginalCategory_Call) RunAndReturn(run func() (Category, error)) *MockCategoryStorer_OriginalCategory_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCategoryStorer creates a new instance of MockCategoryStorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCategoryStorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCategoryStorer {
	mock := &MockCategoryStorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
